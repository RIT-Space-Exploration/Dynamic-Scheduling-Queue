/**
 * File: queue
 * Organization: RIT Space Exploration
 * Author: Dylan Wagner (drw6528@rit.edu)
 * Description:
 *	    Priority Queue implementation using a min-heap.
 */

#define LCHILD(x) 2 * x
#define RCHILD(x) 2 * x + 1
#define PARENT(x) (int) x / 2
#define START 1

#define NULL 0

template <class T, unsigned int capacity, class Compare>
class priority_queue {
public:

    // Empty constructor
    priority_queue(){}

	/**
	 * Remove first element from the priority queue
	 */
	T pop(){
        T root = heap_array[START];
        heap_array[START] = heap_array[queue_size];
        queue_size -= 1;

        int cnt = 1;

        while (cnt < queue_size){

            int lchild = cnt, rchild = cnt;

            if(LCHILD(cnt) <= queue_size) lchild = LCHILD(cnt);
            if(RCHILD(cnt) <= queue_size) rchild = RCHILD(cnt);

            if(compare(heap_array[lchild], heap_array[rchild])){
                swap(cnt, lchild);
                cnt = lchild;
            } else {
                swap(cnt, rchild);
                cnt = rchild;
            }
        }
        return root;
    }

    /**
     * Grab the first element in the priority queue and return it
     * @return
     *      First element in the priority queue
     */
    T top(){
        if(queue_size > 0) return heap_array[START];
        return NULL;
    }

    /**
     * Push a element onto the priority queue
     * @param element
     *      The element to be inserted.
     */
    void push(T element){
        queue_size += 1;
        heap_array[queue_size] = element;

        int dec_cnt = queue_size;

        while (compare(element, heap_array[PARENT(dec_cnt)])){
            swap(dec_cnt, PARENT(dec_cnt));
            dec_cnt = PARENT(dec_cnt);
        }
    }

    /**
     * Return the size of the priority queue
     * @return
     *      Size of priority queue.
     */
	int size(){
        return queue_size;
    }

private:

    // Number of current elements in the queue.
    unsigned int queue_size;

    // Min-Heap array
    T heap_array[capacity];

    // Compare object for two objects
    Compare compare;

    /**
     * Checks if heap has hit max size.
     * @return
     *      TRUE: if size is greater than capacity
     *      FALSE: if size is less than capacity
     */
    bool hit_capacity(){
        return queue_size < capacity;
    }

    /**
     * Swap two elements in the array
     * @param s1
     *      first element index
     * @param s2
     *      second element index
     */
    void swap(const int s1, const int s2){
        T temp = heap_array[s1];
        heap_array[s1] = heap_array[s2];
        heap_array[s2] = temp;
    }
};